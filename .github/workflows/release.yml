name: Build and Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v1.1.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.2'

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          $env:OUTPUT_NAME="go_tasks_${env:GOOS}_${env:GOARCH}.exe"
          go build -o "$env:OUTPUT_NAME"

      - name: Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          GOOS=$(go env GOOS)
          GOARCH=$(go env GOARCH)
          OUTPUT_NAME=go_tasks_${GOOS}_${GOARCH}
          go build -o $OUTPUT_NAME

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go_tasks_${{ matrix.os }}
          path: ./go_tasks_*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Determine Version
        id: version
        run: |
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            VERSION=0.1.${{ github.run_number }}-beta
          else
            VERSION=1.0.${{ github.run_number }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ github.event_name == 'pull_request' }}

      - name: Zip Binaries
        run: |
          zip -r go_tasks.zip ./binaries

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go_tasks.zip
          asset_name: go_tasks.zip
          asset_content_type: application/zip

